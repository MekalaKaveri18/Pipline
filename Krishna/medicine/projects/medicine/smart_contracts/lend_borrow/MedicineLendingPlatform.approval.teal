#pragma version 10
#pragma typetrack false

// smart_contracts.lend_borrow.contract.MedicineLendingPlatform.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 2 1
    bytecblock "medicines" 0x00 0x80 0x151f7c75 "medicine_requests" 0x0000 "medicine_records" 0x0002 0x0000000000000000
    txn ApplicationID
    bnz main_after_if_else@2
    // smart_contracts/lend_borrow/contract.py:33
    // self.medicines = arc4.DynamicArray[MedicineInfo]()
    bytec_0 // "medicines"
    bytec 5 // 0x0000
    app_global_put
    // smart_contracts/lend_borrow/contract.py:34
    // self.medicine_requests = arc4.DynamicArray[MedicineRequest]()
    bytec 4 // "medicine_requests"
    bytec 5 // 0x0000
    app_global_put
    // smart_contracts/lend_borrow/contract.py:35
    // self.medicine_records = arc4.DynamicArray[MedicineRecord]()
    bytec 6 // "medicine_records"
    bytec 5 // 0x0000
    app_global_put

main_after_if_else@2:
    // smart_contracts/lend_borrow/contract.py:22-27
    // # class MedicineLendingPlatform(ARC4Contract):
    // #     # Global state arrays maintained as ARC‑4 DynamicArrays.
    // #     medicines: arc4.DynamicArray[MedicineInfo] = arc4.DynamicArray()
    // #     medicine_requests: arc4.DynamicArray[MedicineRequest] = arc4.DynamicArray()
    // #     medicine_records: arc4.DynamicArray[MedicineRecord] = arc4.DynamicArray()
    // class MedicineLendingPlatform(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@10
    pushbytess 0xdd84679a 0x23734fda 0x43555ddb 0x48757a8b 0xff36f22d // method "register_medicine(string,uint64,uint64)bool", method "request_medicine(string)bool", method "approve_request(string)bool", method "return_medicine(string)bool", method "is_expired(string)bool"
    txna ApplicationArgs 0
    match main_register_medicine_route@5 main_request_medicine_route@6 main_approve_request_route@7 main_return_medicine_route@8 main_is_expired_route@9

main_after_if_else@12:
    // smart_contracts/lend_borrow/contract.py:22-27
    // # class MedicineLendingPlatform(ARC4Contract):
    // #     # Global state arrays maintained as ARC‑4 DynamicArrays.
    // #     medicines: arc4.DynamicArray[MedicineInfo] = arc4.DynamicArray()
    // #     medicine_requests: arc4.DynamicArray[MedicineRequest] = arc4.DynamicArray()
    // #     medicine_records: arc4.DynamicArray[MedicineRecord] = arc4.DynamicArray()
    // class MedicineLendingPlatform(ARC4Contract):
    intc_0 // 0
    return

main_is_expired_route@9:
    // smart_contracts/lend_borrow/contract.py:126
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/lend_borrow/contract.py:22-27
    // # class MedicineLendingPlatform(ARC4Contract):
    // #     # Global state arrays maintained as ARC‑4 DynamicArrays.
    // #     medicines: arc4.DynamicArray[MedicineInfo] = arc4.DynamicArray()
    // #     medicine_requests: arc4.DynamicArray[MedicineRequest] = arc4.DynamicArray()
    // #     medicine_records: arc4.DynamicArray[MedicineRecord] = arc4.DynamicArray()
    // class MedicineLendingPlatform(ARC4Contract):
    txna ApplicationArgs 1
    // smart_contracts/lend_borrow/contract.py:126
    // @arc4.abimethod()
    callsub is_expired
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    return

main_return_medicine_route@8:
    // smart_contracts/lend_borrow/contract.py:113
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/lend_borrow/contract.py:22-27
    // # class MedicineLendingPlatform(ARC4Contract):
    // #     # Global state arrays maintained as ARC‑4 DynamicArrays.
    // #     medicines: arc4.DynamicArray[MedicineInfo] = arc4.DynamicArray()
    // #     medicine_requests: arc4.DynamicArray[MedicineRequest] = arc4.DynamicArray()
    // #     medicine_records: arc4.DynamicArray[MedicineRecord] = arc4.DynamicArray()
    // class MedicineLendingPlatform(ARC4Contract):
    txna ApplicationArgs 1
    // smart_contracts/lend_borrow/contract.py:113
    // @arc4.abimethod()
    callsub return_medicine
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    return

main_approve_request_route@7:
    // smart_contracts/lend_borrow/contract.py:85
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/lend_borrow/contract.py:22-27
    // # class MedicineLendingPlatform(ARC4Contract):
    // #     # Global state arrays maintained as ARC‑4 DynamicArrays.
    // #     medicines: arc4.DynamicArray[MedicineInfo] = arc4.DynamicArray()
    // #     medicine_requests: arc4.DynamicArray[MedicineRequest] = arc4.DynamicArray()
    // #     medicine_records: arc4.DynamicArray[MedicineRecord] = arc4.DynamicArray()
    // class MedicineLendingPlatform(ARC4Contract):
    txna ApplicationArgs 1
    // smart_contracts/lend_borrow/contract.py:85
    // @arc4.abimethod()
    callsub approve_request
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    return

main_request_medicine_route@6:
    // smart_contracts/lend_borrow/contract.py:66
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/lend_borrow/contract.py:22-27
    // # class MedicineLendingPlatform(ARC4Contract):
    // #     # Global state arrays maintained as ARC‑4 DynamicArrays.
    // #     medicines: arc4.DynamicArray[MedicineInfo] = arc4.DynamicArray()
    // #     medicine_requests: arc4.DynamicArray[MedicineRequest] = arc4.DynamicArray()
    // #     medicine_records: arc4.DynamicArray[MedicineRecord] = arc4.DynamicArray()
    // class MedicineLendingPlatform(ARC4Contract):
    txna ApplicationArgs 1
    // smart_contracts/lend_borrow/contract.py:66
    // @arc4.abimethod()
    callsub request_medicine
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    return

main_register_medicine_route@5:
    // smart_contracts/lend_borrow/contract.py:40
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/lend_borrow/contract.py:22-27
    // # class MedicineLendingPlatform(ARC4Contract):
    // #     # Global state arrays maintained as ARC‑4 DynamicArrays.
    // #     medicines: arc4.DynamicArray[MedicineInfo] = arc4.DynamicArray()
    // #     medicine_requests: arc4.DynamicArray[MedicineRequest] = arc4.DynamicArray()
    // #     medicine_records: arc4.DynamicArray[MedicineRecord] = arc4.DynamicArray()
    // class MedicineLendingPlatform(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    // smart_contracts/lend_borrow/contract.py:40
    // @arc4.abimethod()
    callsub register_medicine
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    return

main_bare_routing@10:
    // smart_contracts/lend_borrow/contract.py:22-27
    // # class MedicineLendingPlatform(ARC4Contract):
    // #     # Global state arrays maintained as ARC‑4 DynamicArrays.
    // #     medicines: arc4.DynamicArray[MedicineInfo] = arc4.DynamicArray()
    // #     medicine_requests: arc4.DynamicArray[MedicineRequest] = arc4.DynamicArray()
    // #     medicine_records: arc4.DynamicArray[MedicineRecord] = arc4.DynamicArray()
    // class MedicineLendingPlatform(ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@12
    txn ApplicationID
    !
    assert // can only call when creating
    intc_2 // 1
    return


// _puya_lib.arc4.dynamic_array_concat_dynamic_element(array_items_count: uint64, array_head_and_tail: bytes, new_items_count: uint64, new_head_and_tail: bytes) -> bytes:
dynamic_array_concat_dynamic_element:
    proto 4 1
    pushbytes ""
    dup
    frame_dig -2
    intc_1 // 2
    *
    frame_dig -4
    intc_1 // 2
    *
    intc_0 // 0

dynamic_array_concat_dynamic_element_for_header@1:
    frame_dig 4
    frame_dig 3
    <
    bz dynamic_array_concat_dynamic_element_after_for@4
    frame_dig -3
    frame_dig 4
    dup
    cover 2
    extract_uint16
    frame_dig 2
    +
    itob
    extract 6 2
    frame_dig 1
    swap
    concat
    frame_bury 1
    intc_1 // 2
    +
    frame_bury 4
    b dynamic_array_concat_dynamic_element_for_header@1

dynamic_array_concat_dynamic_element_after_for@4:
    frame_dig -3
    len
    frame_bury 0
    intc_0 // 0
    frame_bury 4

dynamic_array_concat_dynamic_element_for_header@5:
    frame_dig 4
    frame_dig 2
    <
    bz dynamic_array_concat_dynamic_element_after_for@8
    frame_dig -1
    frame_dig 4
    dup
    cover 2
    extract_uint16
    frame_dig 0
    +
    itob
    extract 6 2
    frame_dig 1
    swap
    concat
    frame_bury 1
    intc_1 // 2
    +
    frame_bury 4
    b dynamic_array_concat_dynamic_element_for_header@5

dynamic_array_concat_dynamic_element_after_for@8:
    frame_dig -4
    frame_dig -2
    +
    itob
    extract 6 2
    frame_dig 1
    concat
    frame_dig -3
    frame_dig 3
    frame_dig 0
    substring3
    concat
    frame_dig -1
    len
    frame_dig -1
    frame_dig 2
    uncover 2
    substring3
    concat
    frame_bury 0
    retsub


// smart_contracts.lend_borrow.contract.MedicineLendingPlatform.register_medicine(name: bytes, expiry: bytes, quantity: bytes) -> bytes:
register_medicine:
    // smart_contracts/lend_borrow/contract.py:40-44
    // @arc4.abimethod()
    // def register_medicine(self,
    //                       name: arc4.String,
    //                       expiry: arc4.UInt64,
    //                       quantity: arc4.UInt64) -> arc4.Bool:
    proto 3 1
    // smart_contracts/lend_borrow/contract.py:50
    // for i in algopy.urange(self.medicines.length):
    intc_0 // 0
    bytec_0 // "medicines"
    app_global_get_ex
    assert // check self.medicines exists
    intc_0 // 0
    extract_uint16
    intc_0 // 0

register_medicine_for_header@1:
    // smart_contracts/lend_borrow/contract.py:50
    // for i in algopy.urange(self.medicines.length):
    frame_dig 1
    frame_dig 0
    <
    bz register_medicine_after_for@6
    // smart_contracts/lend_borrow/contract.py:51
    // m = self.medicines[i].copy()
    intc_0 // 0
    bytec_0 // "medicines"
    app_global_get_ex
    assert // check self.medicines exists
    dup
    extract 2 0
    frame_dig 1
    dup
    cover 3
    intc_1 // 2
    *
    dig 1
    swap
    extract_uint16
    uncover 2
    intc_0 // 0
    extract_uint16
    uncover 3
    intc_2 // 1
    +
    dup
    frame_bury 1
    swap
    dig 1
    - // on error: Index access is out of bounds
    dig 3
    len
    uncover 2
    intc_1 // 2
    *
    dig 4
    swap
    extract_uint16
    uncover 2
    select
    substring3
    // smart_contracts/lend_borrow/contract.py:52
    // if m.name == name:
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    len
    substring3
    frame_dig -3
    ==
    bz register_medicine_for_header@1
    // smart_contracts/lend_borrow/contract.py:55
    // return arc4.Bool(True)
    bytec_2 // 0x80
    frame_bury 0
    retsub

register_medicine_after_for@6:
    // smart_contracts/lend_borrow/contract.py:60
    // lender=arc4.Address(Txn.sender)  # Convert Account to Address
    txn Sender
    // smart_contracts/lend_borrow/contract.py:56-61
    //     new_med = MedicineInfo(
    //     name=name,
    //     expiry=expiry,
    //     quantity=quantity,
    //     lender=arc4.Address(Txn.sender)  # Convert Account to Address
    // )
    pushbytes 0x0032
    frame_dig -2
    concat
    frame_dig -1
    concat
    swap
    concat
    frame_dig -3
    concat
    // smart_contracts/lend_borrow/contract.py:62
    // self.medicines.append(new_med.copy())
    intc_0 // 0
    bytec_0 // "medicines"
    app_global_get_ex
    assert // check self.medicines exists
    bytec 7 // 0x0002
    uncover 2
    concat
    dig 1
    intc_0 // 0
    extract_uint16
    uncover 2
    extract 2 0
    intc_2 // 1
    uncover 3
    callsub dynamic_array_concat_dynamic_element
    bytec_0 // "medicines"
    swap
    app_global_put
    // smart_contracts/lend_borrow/contract.py:64
    // return arc4.Bool(True)
    bytec_2 // 0x80
    frame_bury 0
    retsub


// smart_contracts.lend_borrow.contract.MedicineLendingPlatform.request_medicine(name: bytes) -> bytes:
request_medicine:
    // smart_contracts/lend_borrow/contract.py:66-67
    // @arc4.abimethod()
    // def request_medicine(self, name: arc4.String) -> arc4.Bool:
    proto 1 1
    intc_0 // 0
    // smart_contracts/lend_borrow/contract.py:71
    // for i in algopy.urange(self.medicines.length):
    dup
    bytec_0 // "medicines"
    app_global_get_ex
    assert // check self.medicines exists
    intc_0 // 0
    extract_uint16
    intc_0 // 0

request_medicine_for_header@1:
    // smart_contracts/lend_borrow/contract.py:71
    // for i in algopy.urange(self.medicines.length):
    frame_dig 2
    frame_dig 1
    <
    bz request_medicine_after_for@9
    // smart_contracts/lend_borrow/contract.py:72
    // m = self.medicines[i].copy()
    intc_0 // 0
    bytec_0 // "medicines"
    app_global_get_ex
    assert // check self.medicines exists
    dup
    extract 2 0
    frame_dig 2
    dup
    cover 3
    intc_1 // 2
    *
    dig 1
    swap
    extract_uint16
    uncover 2
    intc_0 // 0
    extract_uint16
    uncover 3
    intc_2 // 1
    +
    dup
    frame_bury 2
    swap
    dig 1
    - // on error: Index access is out of bounds
    dig 3
    len
    uncover 2
    intc_1 // 2
    *
    dig 4
    swap
    extract_uint16
    uncover 2
    select
    substring3
    dup
    frame_bury 0
    // smart_contracts/lend_borrow/contract.py:73
    // if m.name == name:
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    len
    substring3
    frame_dig -1
    ==
    bz request_medicine_for_header@1
    // smart_contracts/lend_borrow/contract.py:74
    // if m.quantity > arc4.UInt64(0) and Txn.first_valid_time <= m.expiry:  # Note: no parentheses
    frame_dig 0
    extract 10 8 // on error: Index access is out of bounds
    bytec 8 // 0x0000000000000000
    b>
    bz request_medicine_else_body@6
    frame_dig 0
    extract 2 8 // on error: Index access is out of bounds
    txn FirstValidTime
    itob
    b>=
    bz request_medicine_else_body@6
    // smart_contracts/lend_borrow/contract.py:75-78
    // req = MedicineRequest(
    //     medicine_name=name,
    //     requester=arc4.Address(Txn.sender)  # Convert Account to Address
    // )
    pushbytes 0x0022
    // smart_contracts/lend_borrow/contract.py:77
    // requester=arc4.Address(Txn.sender)  # Convert Account to Address
    txn Sender
    // smart_contracts/lend_borrow/contract.py:75-78
    // req = MedicineRequest(
    //     medicine_name=name,
    //     requester=arc4.Address(Txn.sender)  # Convert Account to Address
    // )
    concat
    frame_dig -1
    concat
    // smart_contracts/lend_borrow/contract.py:79
    // self.medicine_requests.append(req)
    intc_0 // 0
    bytec 4 // "medicine_requests"
    app_global_get_ex
    assert // check self.medicine_requests exists
    bytec 7 // 0x0002
    uncover 2
    concat
    dig 1
    intc_0 // 0
    extract_uint16
    uncover 2
    extract 2 0
    intc_2 // 1
    uncover 3
    callsub dynamic_array_concat_dynamic_element
    bytec 4 // "medicine_requests"
    swap
    app_global_put
    // smart_contracts/lend_borrow/contract.py:80
    // return arc4.Bool(True)
    bytec_2 // 0x80
    frame_bury 0
    retsub

request_medicine_else_body@6:
    // smart_contracts/lend_borrow/contract.py:82
    // return arc4.Bool(False)
    bytec_1 // 0x00
    frame_bury 0
    retsub

request_medicine_after_for@9:
    // smart_contracts/lend_borrow/contract.py:83
    // return arc4.Bool(False)
    bytec_1 // 0x00
    frame_bury 0
    retsub


// smart_contracts.lend_borrow.contract.MedicineLendingPlatform.approve_request(name: bytes) -> bytes:
approve_request:
    // smart_contracts/lend_borrow/contract.py:85-86
    // @arc4.abimethod()
    // def approve_request(self, name: arc4.String) -> arc4.Bool:
    proto 1 1
    intc_0 // 0
    dupn 2
    pushbytes ""
    dupn 2
    // smart_contracts/lend_borrow/contract.py:92
    // for i in algopy.urange(self.medicines.length):
    intc_0 // 0
    bytec_0 // "medicines"
    app_global_get_ex
    assert // check self.medicines exists
    intc_0 // 0
    extract_uint16
    intc_0 // 0

approve_request_for_header@1:
    // smart_contracts/lend_borrow/contract.py:92
    // for i in algopy.urange(self.medicines.length):
    frame_dig 7
    frame_dig 6
    <
    bz approve_request_after_for@16
    // smart_contracts/lend_borrow/contract.py:93
    // m = self.medicines[i].copy()
    intc_0 // 0
    bytec_0 // "medicines"
    app_global_get_ex
    assert // check self.medicines exists
    dup
    extract 2 0
    frame_dig 7
    dup
    cover 3
    intc_1 // 2
    *
    dig 1
    swap
    extract_uint16
    uncover 2
    intc_0 // 0
    extract_uint16
    uncover 3
    intc_2 // 1
    +
    dup
    frame_bury 7
    swap
    dig 1
    - // on error: Index access is out of bounds
    dig 3
    len
    uncover 2
    intc_1 // 2
    *
    dig 4
    swap
    extract_uint16
    uncover 2
    select
    substring3
    dup
    frame_bury 0
    // smart_contracts/lend_borrow/contract.py:94
    // if m.name == name:
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    len
    substring3
    frame_dig -1
    ==
    bz approve_request_for_header@1
    // smart_contracts/lend_borrow/contract.py:95
    // if Txn.sender != m.lender:  # Use the global Txn object
    frame_dig 0
    extract 18 32 // on error: Index access is out of bounds
    txn Sender
    !=
    bz approve_request_after_if_else@5
    // smart_contracts/lend_borrow/contract.py:96
    // return arc4.Bool(False)
    bytec_1 // 0x00
    frame_bury 0
    retsub

approve_request_after_if_else@5:
    // smart_contracts/lend_borrow/contract.py:97
    // for req in self.medicine_requests:
    intc_0 // 0
    bytec 4 // "medicine_requests"
    app_global_get_ex
    swap
    dup
    cover 2
    frame_bury 1
    assert // check self.medicine_requests exists
    intc_0 // 0
    extract_uint16
    frame_bury 3
    intc_0 // 0
    frame_bury 4

approve_request_for_header@6:
    // smart_contracts/lend_borrow/contract.py:97
    // for req in self.medicine_requests:
    frame_dig 4
    frame_dig 3
    <
    bz approve_request_after_for@13
    frame_dig 1
    extract 2 0
    frame_dig 4
    dup
    cover 2
    intc_1 // 2
    *
    dig 1
    swap
    extract_uint16
    uncover 2
    intc_2 // 1
    +
    dup
    frame_bury 5
    frame_dig 3
    dig 1
    - // on error: Index access is out of bounds
    dig 3
    len
    uncover 2
    intc_1 // 2
    *
    dig 4
    swap
    extract_uint16
    uncover 2
    select
    substring3
    dup
    frame_bury 2
    // smart_contracts/lend_borrow/contract.py:98
    // if req.medicine_name == name:
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    len
    substring3
    frame_dig -1
    ==
    bz approve_request_after_if_else@11
    // smart_contracts/lend_borrow/contract.py:99
    // if m.quantity > arc4.UInt64(0):
    frame_dig 0
    extract 10 8 // on error: Index access is out of bounds
    bytec 8 // 0x0000000000000000
    b>
    bz approve_request_after_if_else@11
    // smart_contracts/lend_borrow/contract.py:104
    // requester=req.requester,
    frame_dig 2
    extract 2 32 // on error: Index access is out of bounds
    // smart_contracts/lend_borrow/contract.py:105
    // timestamp=arc4.UInt64(Txn.first_valid_time)  # Ensure correct UInt64 type
    txn FirstValidTime
    itob
    // smart_contracts/lend_borrow/contract.py:102-106
    // record = MedicineRecord(
    //     medicine_name=name,
    //     requester=req.requester,
    //     timestamp=arc4.UInt64(Txn.first_valid_time)  # Ensure correct UInt64 type
    // )
    pushbytes 0x002a
    uncover 2
    concat
    swap
    concat
    frame_dig -1
    concat
    // smart_contracts/lend_borrow/contract.py:107
    // self.medicine_records.append(record)
    intc_0 // 0
    bytec 6 // "medicine_records"
    app_global_get_ex
    assert // check self.medicine_records exists
    bytec 7 // 0x0002
    uncover 2
    concat
    dig 1
    intc_0 // 0
    extract_uint16
    uncover 2
    extract 2 0
    intc_2 // 1
    uncover 3
    callsub dynamic_array_concat_dynamic_element
    bytec 6 // "medicine_records"
    swap
    app_global_put
    // smart_contracts/lend_borrow/contract.py:108-109
    // # Optionally: remove the fulfilled request from the array.
    // return arc4.Bool(True)
    bytec_2 // 0x80
    frame_bury 0
    retsub

approve_request_after_if_else@11:
    frame_dig 5
    frame_bury 4
    b approve_request_for_header@6

approve_request_after_for@13:
    // smart_contracts/lend_borrow/contract.py:110
    // return arc4.Bool(False)
    bytec_1 // 0x00
    frame_bury 0
    retsub

approve_request_after_for@16:
    // smart_contracts/lend_borrow/contract.py:111
    // return arc4.Bool(False)
    bytec_1 // 0x00
    frame_bury 0
    retsub


// smart_contracts.lend_borrow.contract.MedicineLendingPlatform.return_medicine(name: bytes) -> bytes:
return_medicine:
    // smart_contracts/lend_borrow/contract.py:113-114
    // @arc4.abimethod()
    // def return_medicine(self, name: arc4.String) -> arc4.Bool:
    proto 1 1
    // smart_contracts/lend_borrow/contract.py:118
    // for i in algopy.urange(self.medicines.length):
    intc_0 // 0
    bytec_0 // "medicines"
    app_global_get_ex
    assert // check self.medicines exists
    intc_0 // 0
    extract_uint16
    intc_0 // 0

return_medicine_for_header@1:
    // smart_contracts/lend_borrow/contract.py:118
    // for i in algopy.urange(self.medicines.length):
    frame_dig 1
    frame_dig 0
    <
    bz return_medicine_after_for@6
    // smart_contracts/lend_borrow/contract.py:119
    // m = self.medicines[i].copy()
    intc_0 // 0
    bytec_0 // "medicines"
    app_global_get_ex
    assert // check self.medicines exists
    dup
    extract 2 0
    frame_dig 1
    dup
    cover 3
    intc_1 // 2
    *
    dig 1
    swap
    extract_uint16
    uncover 2
    intc_0 // 0
    extract_uint16
    uncover 3
    intc_2 // 1
    +
    dup
    frame_bury 1
    swap
    dig 1
    - // on error: Index access is out of bounds
    dig 3
    len
    uncover 2
    intc_1 // 2
    *
    dig 4
    swap
    extract_uint16
    uncover 2
    select
    substring3
    // smart_contracts/lend_borrow/contract.py:120
    // if m.name == name:
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    len
    substring3
    frame_dig -1
    ==
    bz return_medicine_for_header@1
    // smart_contracts/lend_borrow/contract.py:123
    // return arc4.Bool(True)
    bytec_2 // 0x80
    frame_bury 0
    retsub

return_medicine_after_for@6:
    // smart_contracts/lend_borrow/contract.py:124
    // return arc4.Bool(False)
    bytec_1 // 0x00
    frame_bury 0
    retsub


// smart_contracts.lend_borrow.contract.MedicineLendingPlatform.is_expired(name: bytes) -> bytes:
is_expired:
    // smart_contracts/lend_borrow/contract.py:126-127
    // @arc4.abimethod()
    // def is_expired(self, name: arc4.String) -> arc4.Bool:
    proto 1 1
    intc_0 // 0
    // smart_contracts/lend_borrow/contract.py:131
    // for i in algopy.urange(self.medicines.length):
    dup
    bytec_0 // "medicines"
    app_global_get_ex
    assert // check self.medicines exists
    intc_0 // 0
    extract_uint16
    intc_0 // 0

is_expired_for_header@1:
    // smart_contracts/lend_borrow/contract.py:131
    // for i in algopy.urange(self.medicines.length):
    frame_dig 2
    frame_dig 1
    <
    bz is_expired_after_for@6
    // smart_contracts/lend_borrow/contract.py:132
    // m = self.medicines[i].copy()
    intc_0 // 0
    bytec_0 // "medicines"
    app_global_get_ex
    assert // check self.medicines exists
    dup
    extract 2 0
    frame_dig 2
    dup
    cover 3
    intc_1 // 2
    *
    dig 1
    swap
    extract_uint16
    uncover 2
    intc_0 // 0
    extract_uint16
    uncover 3
    intc_2 // 1
    +
    dup
    frame_bury 2
    swap
    dig 1
    - // on error: Index access is out of bounds
    dig 3
    len
    uncover 2
    intc_1 // 2
    *
    dig 4
    swap
    extract_uint16
    uncover 2
    select
    substring3
    dup
    frame_bury 0
    // smart_contracts/lend_borrow/contract.py:133
    // if m.name == name:
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    len
    substring3
    frame_dig -1
    ==
    bz is_expired_for_header@1
    // smart_contracts/lend_borrow/contract.py:134
    // return arc4.Bool(Txn.first_valid_time > m.expiry)  # Use the global Txn object
    frame_dig 0
    extract 2 8 // on error: Index access is out of bounds
    txn FirstValidTime
    itob
    b<
    bytec_1 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    frame_bury 0
    retsub

is_expired_after_for@6:
    // smart_contracts/lend_borrow/contract.py:135
    // return arc4.Bool(True)
    bytec_2 // 0x80
    frame_bury 0
    retsub
