{
    "hints": {
        "register_medicine(string,uint64,uint64)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "request_medicine(string)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "approve_request(string)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "return_medicine(string)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "is_expired(string)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 3,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "medicine_records": {
                    "type": "bytes",
                    "key": "medicine_records"
                },
                "medicine_requests": {
                    "type": "bytes",
                    "key": "medicine_requests"
                },
                "medicines": {
                    "type": "bytes",
                    "key": "medicines"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "MedicineLendingPlatform",
        "methods": [
            {
                "name": "register_medicine",
                "args": [
                    {
                        "type": "string",
                        "name": "name"
                    },
                    {
                        "type": "uint64",
                        "name": "expiry"
                    },
                    {
                        "type": "uint64",
                        "name": "quantity"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                },
                "desc": "Registers or updates a medicine.\nIf the medicine already exists, increases its quantity. Sets the lender to the transaction sender."
            },
            {
                "name": "request_medicine",
                "args": [
                    {
                        "type": "string",
                        "name": "name"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                },
                "desc": "Records a request for a medicine if available and not expired."
            },
            {
                "name": "approve_request",
                "args": [
                    {
                        "type": "string",
                        "name": "name"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                },
                "desc": "Approves a medicine request.\nOnly the lender (registrant) may approve. On approval, decreases quantity and records the medicine record."
            },
            {
                "name": "return_medicine",
                "args": [
                    {
                        "type": "string",
                        "name": "name"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                },
                "desc": "Processes the return of a medicine by increasing its quantity."
            },
            {
                "name": "is_expired",
                "args": [
                    {
                        "type": "string",
                        "name": "name"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                },
                "desc": "Checks if a medicine is expired (i.e. current round > expiry)."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}